// Code generated by SQLBoiler 4.13.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Valuation is an object representing the database table.
type Valuation struct {
	ID                    string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	DeviceDefinitionID    null.String       `boil:"device_definition_id" json:"device_definition_id,omitempty" toml:"device_definition_id" yaml:"device_definition_id,omitempty"`
	Vin                   string            `boil:"vin" json:"vin" toml:"vin" yaml:"vin"`
	UserDeviceID          null.String       `boil:"user_device_id" json:"user_device_id,omitempty" toml:"user_device_id" yaml:"user_device_id,omitempty"`
	OfferMetadata         null.JSON         `boil:"offer_metadata" json:"offer_metadata,omitempty" toml:"offer_metadata" yaml:"offer_metadata,omitempty"`
	EdmundsMetadata       null.JSON         `boil:"edmunds_metadata" json:"edmunds_metadata,omitempty" toml:"edmunds_metadata" yaml:"edmunds_metadata,omitempty"`
	CreatedAt             time.Time         `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt             time.Time         `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DrivlyPricingMetadata null.JSON         `boil:"drivly_pricing_metadata" json:"drivly_pricing_metadata,omitempty" toml:"drivly_pricing_metadata" yaml:"drivly_pricing_metadata,omitempty"`
	RequestMetadata       null.JSON         `boil:"request_metadata" json:"request_metadata,omitempty" toml:"request_metadata" yaml:"request_metadata,omitempty"`
	VincarioMetadata      null.JSON         `boil:"vincario_metadata" json:"vincario_metadata,omitempty" toml:"vincario_metadata" yaml:"vincario_metadata,omitempty"`
	TokenID               types.NullDecimal `boil:"token_id" json:"token_id,omitempty" toml:"token_id" yaml:"token_id,omitempty"`

	R *valuationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L valuationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ValuationColumns = struct {
	ID                    string
	DeviceDefinitionID    string
	Vin                   string
	UserDeviceID          string
	OfferMetadata         string
	EdmundsMetadata       string
	CreatedAt             string
	UpdatedAt             string
	DrivlyPricingMetadata string
	RequestMetadata       string
	VincarioMetadata      string
	TokenID               string
}{
	ID:                    "id",
	DeviceDefinitionID:    "device_definition_id",
	Vin:                   "vin",
	UserDeviceID:          "user_device_id",
	OfferMetadata:         "offer_metadata",
	EdmundsMetadata:       "edmunds_metadata",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
	DrivlyPricingMetadata: "drivly_pricing_metadata",
	RequestMetadata:       "request_metadata",
	VincarioMetadata:      "vincario_metadata",
	TokenID:               "token_id",
}

var ValuationTableColumns = struct {
	ID                    string
	DeviceDefinitionID    string
	Vin                   string
	UserDeviceID          string
	OfferMetadata         string
	EdmundsMetadata       string
	CreatedAt             string
	UpdatedAt             string
	DrivlyPricingMetadata string
	RequestMetadata       string
	VincarioMetadata      string
	TokenID               string
}{
	ID:                    "valuations.id",
	DeviceDefinitionID:    "valuations.device_definition_id",
	Vin:                   "valuations.vin",
	UserDeviceID:          "valuations.user_device_id",
	OfferMetadata:         "valuations.offer_metadata",
	EdmundsMetadata:       "valuations.edmunds_metadata",
	CreatedAt:             "valuations.created_at",
	UpdatedAt:             "valuations.updated_at",
	DrivlyPricingMetadata: "valuations.drivly_pricing_metadata",
	RequestMetadata:       "valuations.request_metadata",
	VincarioMetadata:      "valuations.vincario_metadata",
	TokenID:               "valuations.token_id",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertypes_NullDecimal struct{ field string }

func (w whereHelpertypes_NullDecimal) EQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpertypes_NullDecimal) NEQ(x types.NullDecimal) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpertypes_NullDecimal) LT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_NullDecimal) LTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_NullDecimal) GT(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_NullDecimal) GTE(x types.NullDecimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpertypes_NullDecimal) IsNull() qm.QueryMod { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpertypes_NullDecimal) IsNotNull() qm.QueryMod {
	return qmhelper.WhereIsNotNull(w.field)
}

var ValuationWhere = struct {
	ID                    whereHelperstring
	DeviceDefinitionID    whereHelpernull_String
	Vin                   whereHelperstring
	UserDeviceID          whereHelpernull_String
	OfferMetadata         whereHelpernull_JSON
	EdmundsMetadata       whereHelpernull_JSON
	CreatedAt             whereHelpertime_Time
	UpdatedAt             whereHelpertime_Time
	DrivlyPricingMetadata whereHelpernull_JSON
	RequestMetadata       whereHelpernull_JSON
	VincarioMetadata      whereHelpernull_JSON
	TokenID               whereHelpertypes_NullDecimal
}{
	ID:                    whereHelperstring{field: "\"valuations_api\".\"valuations\".\"id\""},
	DeviceDefinitionID:    whereHelpernull_String{field: "\"valuations_api\".\"valuations\".\"device_definition_id\""},
	Vin:                   whereHelperstring{field: "\"valuations_api\".\"valuations\".\"vin\""},
	UserDeviceID:          whereHelpernull_String{field: "\"valuations_api\".\"valuations\".\"user_device_id\""},
	OfferMetadata:         whereHelpernull_JSON{field: "\"valuations_api\".\"valuations\".\"offer_metadata\""},
	EdmundsMetadata:       whereHelpernull_JSON{field: "\"valuations_api\".\"valuations\".\"edmunds_metadata\""},
	CreatedAt:             whereHelpertime_Time{field: "\"valuations_api\".\"valuations\".\"created_at\""},
	UpdatedAt:             whereHelpertime_Time{field: "\"valuations_api\".\"valuations\".\"updated_at\""},
	DrivlyPricingMetadata: whereHelpernull_JSON{field: "\"valuations_api\".\"valuations\".\"drivly_pricing_metadata\""},
	RequestMetadata:       whereHelpernull_JSON{field: "\"valuations_api\".\"valuations\".\"request_metadata\""},
	VincarioMetadata:      whereHelpernull_JSON{field: "\"valuations_api\".\"valuations\".\"vincario_metadata\""},
	TokenID:               whereHelpertypes_NullDecimal{field: "\"valuations_api\".\"valuations\".\"token_id\""},
}

// ValuationRels is where relationship names are stored.
var ValuationRels = struct {
}{}

// valuationR is where relationships are stored.
type valuationR struct {
}

// NewStruct creates a new relationship struct
func (*valuationR) NewStruct() *valuationR {
	return &valuationR{}
}

// valuationL is where Load methods for each relationship are stored.
type valuationL struct{}

var (
	valuationAllColumns            = []string{"id", "device_definition_id", "vin", "user_device_id", "offer_metadata", "edmunds_metadata", "created_at", "updated_at", "drivly_pricing_metadata", "request_metadata", "vincario_metadata", "token_id"}
	valuationColumnsWithoutDefault = []string{"id", "vin"}
	valuationColumnsWithDefault    = []string{"device_definition_id", "user_device_id", "offer_metadata", "edmunds_metadata", "created_at", "updated_at", "drivly_pricing_metadata", "request_metadata", "vincario_metadata", "token_id"}
	valuationPrimaryKeyColumns     = []string{"id"}
	valuationGeneratedColumns      = []string{}
)

type (
	// ValuationSlice is an alias for a slice of pointers to Valuation.
	// This should almost always be used instead of []Valuation.
	ValuationSlice []*Valuation
	// ValuationHook is the signature for custom Valuation hook methods
	ValuationHook func(context.Context, boil.ContextExecutor, *Valuation) error

	valuationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	valuationType                 = reflect.TypeOf(&Valuation{})
	valuationMapping              = queries.MakeStructMapping(valuationType)
	valuationPrimaryKeyMapping, _ = queries.BindMapping(valuationType, valuationMapping, valuationPrimaryKeyColumns)
	valuationInsertCacheMut       sync.RWMutex
	valuationInsertCache          = make(map[string]insertCache)
	valuationUpdateCacheMut       sync.RWMutex
	valuationUpdateCache          = make(map[string]updateCache)
	valuationUpsertCacheMut       sync.RWMutex
	valuationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var valuationAfterSelectHooks []ValuationHook

var valuationBeforeInsertHooks []ValuationHook
var valuationAfterInsertHooks []ValuationHook

var valuationBeforeUpdateHooks []ValuationHook
var valuationAfterUpdateHooks []ValuationHook

var valuationBeforeDeleteHooks []ValuationHook
var valuationAfterDeleteHooks []ValuationHook

var valuationBeforeUpsertHooks []ValuationHook
var valuationAfterUpsertHooks []ValuationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Valuation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range valuationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Valuation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range valuationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Valuation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range valuationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Valuation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range valuationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Valuation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range valuationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Valuation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range valuationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Valuation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range valuationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Valuation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range valuationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Valuation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range valuationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddValuationHook registers your hook function for all future operations.
func AddValuationHook(hookPoint boil.HookPoint, valuationHook ValuationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		valuationAfterSelectHooks = append(valuationAfterSelectHooks, valuationHook)
	case boil.BeforeInsertHook:
		valuationBeforeInsertHooks = append(valuationBeforeInsertHooks, valuationHook)
	case boil.AfterInsertHook:
		valuationAfterInsertHooks = append(valuationAfterInsertHooks, valuationHook)
	case boil.BeforeUpdateHook:
		valuationBeforeUpdateHooks = append(valuationBeforeUpdateHooks, valuationHook)
	case boil.AfterUpdateHook:
		valuationAfterUpdateHooks = append(valuationAfterUpdateHooks, valuationHook)
	case boil.BeforeDeleteHook:
		valuationBeforeDeleteHooks = append(valuationBeforeDeleteHooks, valuationHook)
	case boil.AfterDeleteHook:
		valuationAfterDeleteHooks = append(valuationAfterDeleteHooks, valuationHook)
	case boil.BeforeUpsertHook:
		valuationBeforeUpsertHooks = append(valuationBeforeUpsertHooks, valuationHook)
	case boil.AfterUpsertHook:
		valuationAfterUpsertHooks = append(valuationAfterUpsertHooks, valuationHook)
	}
}

// One returns a single valuation record from the query.
func (q valuationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Valuation, error) {
	o := &Valuation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for valuations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Valuation records from the query.
func (q valuationQuery) All(ctx context.Context, exec boil.ContextExecutor) (ValuationSlice, error) {
	var o []*Valuation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Valuation slice")
	}

	if len(valuationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Valuation records in the query.
func (q valuationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count valuations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q valuationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if valuations exists")
	}

	return count > 0, nil
}

// Valuations retrieves all the records using an executor.
func Valuations(mods ...qm.QueryMod) valuationQuery {
	mods = append(mods, qm.From("\"valuations_api\".\"valuations\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"valuations_api\".\"valuations\".*"})
	}

	return valuationQuery{q}
}

// FindValuation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindValuation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Valuation, error) {
	valuationObj := &Valuation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"valuations_api\".\"valuations\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, valuationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from valuations")
	}

	if err = valuationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return valuationObj, err
	}

	return valuationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Valuation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no valuations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(valuationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	valuationInsertCacheMut.RLock()
	cache, cached := valuationInsertCache[key]
	valuationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			valuationAllColumns,
			valuationColumnsWithDefault,
			valuationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(valuationType, valuationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(valuationType, valuationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"valuations_api\".\"valuations\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"valuations_api\".\"valuations\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into valuations")
	}

	if !cached {
		valuationInsertCacheMut.Lock()
		valuationInsertCache[key] = cache
		valuationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Valuation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Valuation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	valuationUpdateCacheMut.RLock()
	cache, cached := valuationUpdateCache[key]
	valuationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			valuationAllColumns,
			valuationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update valuations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"valuations_api\".\"valuations\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, valuationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(valuationType, valuationMapping, append(wl, valuationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update valuations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for valuations")
	}

	if !cached {
		valuationUpdateCacheMut.Lock()
		valuationUpdateCache[key] = cache
		valuationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q valuationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for valuations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for valuations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ValuationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), valuationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"valuations_api\".\"valuations\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, valuationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in valuation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all valuation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Valuation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no valuations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(valuationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	valuationUpsertCacheMut.RLock()
	cache, cached := valuationUpsertCache[key]
	valuationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			valuationAllColumns,
			valuationColumnsWithDefault,
			valuationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			valuationAllColumns,
			valuationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert valuations, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(valuationPrimaryKeyColumns))
			copy(conflict, valuationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"valuations_api\".\"valuations\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(valuationType, valuationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(valuationType, valuationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert valuations")
	}

	if !cached {
		valuationUpsertCacheMut.Lock()
		valuationUpsertCache[key] = cache
		valuationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Valuation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Valuation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Valuation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), valuationPrimaryKeyMapping)
	sql := "DELETE FROM \"valuations_api\".\"valuations\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from valuations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for valuations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q valuationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no valuationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from valuations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for valuations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ValuationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(valuationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), valuationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"valuations_api\".\"valuations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, valuationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from valuation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for valuations")
	}

	if len(valuationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Valuation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindValuation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ValuationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ValuationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), valuationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"valuations_api\".\"valuations\".* FROM \"valuations_api\".\"valuations\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, valuationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ValuationSlice")
	}

	*o = slice

	return nil
}

// ValuationExists checks if the Valuation row exists.
func ValuationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"valuations_api\".\"valuations\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if valuations exists")
	}

	return exists, nil
}
