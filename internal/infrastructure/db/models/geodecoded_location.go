// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// GeodecodedLocation is an object representing the database table.
type GeodecodedLocation struct {
	TokenID    int64       `boil:"token_id" json:"token_id" toml:"token_id" yaml:"token_id"`
	PostalCode null.String `boil:"postal_code" json:"postal_code,omitempty" toml:"postal_code" yaml:"postal_code,omitempty"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Country    null.String `boil:"country" json:"country,omitempty" toml:"country" yaml:"country,omitempty"`

	R *geodecodedLocationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L geodecodedLocationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GeodecodedLocationColumns = struct {
	TokenID    string
	PostalCode string
	CreatedAt  string
	Country    string
}{
	TokenID:    "token_id",
	PostalCode: "postal_code",
	CreatedAt:  "created_at",
	Country:    "country",
}

var GeodecodedLocationTableColumns = struct {
	TokenID    string
	PostalCode string
	CreatedAt  string
	Country    string
}{
	TokenID:    "geodecoded_location.token_id",
	PostalCode: "geodecoded_location.postal_code",
	CreatedAt:  "geodecoded_location.created_at",
	Country:    "geodecoded_location.country",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var GeodecodedLocationWhere = struct {
	TokenID    whereHelperint64
	PostalCode whereHelpernull_String
	CreatedAt  whereHelpertime_Time
	Country    whereHelpernull_String
}{
	TokenID:    whereHelperint64{field: "\"valuations_api\".\"geodecoded_location\".\"token_id\""},
	PostalCode: whereHelpernull_String{field: "\"valuations_api\".\"geodecoded_location\".\"postal_code\""},
	CreatedAt:  whereHelpertime_Time{field: "\"valuations_api\".\"geodecoded_location\".\"created_at\""},
	Country:    whereHelpernull_String{field: "\"valuations_api\".\"geodecoded_location\".\"country\""},
}

// GeodecodedLocationRels is where relationship names are stored.
var GeodecodedLocationRels = struct {
}{}

// geodecodedLocationR is where relationships are stored.
type geodecodedLocationR struct {
}

// NewStruct creates a new relationship struct
func (*geodecodedLocationR) NewStruct() *geodecodedLocationR {
	return &geodecodedLocationR{}
}

// geodecodedLocationL is where Load methods for each relationship are stored.
type geodecodedLocationL struct{}

var (
	geodecodedLocationAllColumns            = []string{"token_id", "postal_code", "created_at", "country"}
	geodecodedLocationColumnsWithoutDefault = []string{"token_id"}
	geodecodedLocationColumnsWithDefault    = []string{"postal_code", "created_at", "country"}
	geodecodedLocationPrimaryKeyColumns     = []string{"token_id"}
	geodecodedLocationGeneratedColumns      = []string{}
)

type (
	// GeodecodedLocationSlice is an alias for a slice of pointers to GeodecodedLocation.
	// This should almost always be used instead of []GeodecodedLocation.
	GeodecodedLocationSlice []*GeodecodedLocation
	// GeodecodedLocationHook is the signature for custom GeodecodedLocation hook methods
	GeodecodedLocationHook func(context.Context, boil.ContextExecutor, *GeodecodedLocation) error

	geodecodedLocationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	geodecodedLocationType                 = reflect.TypeOf(&GeodecodedLocation{})
	geodecodedLocationMapping              = queries.MakeStructMapping(geodecodedLocationType)
	geodecodedLocationPrimaryKeyMapping, _ = queries.BindMapping(geodecodedLocationType, geodecodedLocationMapping, geodecodedLocationPrimaryKeyColumns)
	geodecodedLocationInsertCacheMut       sync.RWMutex
	geodecodedLocationInsertCache          = make(map[string]insertCache)
	geodecodedLocationUpdateCacheMut       sync.RWMutex
	geodecodedLocationUpdateCache          = make(map[string]updateCache)
	geodecodedLocationUpsertCacheMut       sync.RWMutex
	geodecodedLocationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var geodecodedLocationAfterSelectMu sync.Mutex
var geodecodedLocationAfterSelectHooks []GeodecodedLocationHook

var geodecodedLocationBeforeInsertMu sync.Mutex
var geodecodedLocationBeforeInsertHooks []GeodecodedLocationHook
var geodecodedLocationAfterInsertMu sync.Mutex
var geodecodedLocationAfterInsertHooks []GeodecodedLocationHook

var geodecodedLocationBeforeUpdateMu sync.Mutex
var geodecodedLocationBeforeUpdateHooks []GeodecodedLocationHook
var geodecodedLocationAfterUpdateMu sync.Mutex
var geodecodedLocationAfterUpdateHooks []GeodecodedLocationHook

var geodecodedLocationBeforeDeleteMu sync.Mutex
var geodecodedLocationBeforeDeleteHooks []GeodecodedLocationHook
var geodecodedLocationAfterDeleteMu sync.Mutex
var geodecodedLocationAfterDeleteHooks []GeodecodedLocationHook

var geodecodedLocationBeforeUpsertMu sync.Mutex
var geodecodedLocationBeforeUpsertHooks []GeodecodedLocationHook
var geodecodedLocationAfterUpsertMu sync.Mutex
var geodecodedLocationAfterUpsertHooks []GeodecodedLocationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *GeodecodedLocation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geodecodedLocationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *GeodecodedLocation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geodecodedLocationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *GeodecodedLocation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geodecodedLocationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *GeodecodedLocation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geodecodedLocationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *GeodecodedLocation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geodecodedLocationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *GeodecodedLocation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geodecodedLocationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *GeodecodedLocation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geodecodedLocationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *GeodecodedLocation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geodecodedLocationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *GeodecodedLocation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range geodecodedLocationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGeodecodedLocationHook registers your hook function for all future operations.
func AddGeodecodedLocationHook(hookPoint boil.HookPoint, geodecodedLocationHook GeodecodedLocationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		geodecodedLocationAfterSelectMu.Lock()
		geodecodedLocationAfterSelectHooks = append(geodecodedLocationAfterSelectHooks, geodecodedLocationHook)
		geodecodedLocationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		geodecodedLocationBeforeInsertMu.Lock()
		geodecodedLocationBeforeInsertHooks = append(geodecodedLocationBeforeInsertHooks, geodecodedLocationHook)
		geodecodedLocationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		geodecodedLocationAfterInsertMu.Lock()
		geodecodedLocationAfterInsertHooks = append(geodecodedLocationAfterInsertHooks, geodecodedLocationHook)
		geodecodedLocationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		geodecodedLocationBeforeUpdateMu.Lock()
		geodecodedLocationBeforeUpdateHooks = append(geodecodedLocationBeforeUpdateHooks, geodecodedLocationHook)
		geodecodedLocationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		geodecodedLocationAfterUpdateMu.Lock()
		geodecodedLocationAfterUpdateHooks = append(geodecodedLocationAfterUpdateHooks, geodecodedLocationHook)
		geodecodedLocationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		geodecodedLocationBeforeDeleteMu.Lock()
		geodecodedLocationBeforeDeleteHooks = append(geodecodedLocationBeforeDeleteHooks, geodecodedLocationHook)
		geodecodedLocationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		geodecodedLocationAfterDeleteMu.Lock()
		geodecodedLocationAfterDeleteHooks = append(geodecodedLocationAfterDeleteHooks, geodecodedLocationHook)
		geodecodedLocationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		geodecodedLocationBeforeUpsertMu.Lock()
		geodecodedLocationBeforeUpsertHooks = append(geodecodedLocationBeforeUpsertHooks, geodecodedLocationHook)
		geodecodedLocationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		geodecodedLocationAfterUpsertMu.Lock()
		geodecodedLocationAfterUpsertHooks = append(geodecodedLocationAfterUpsertHooks, geodecodedLocationHook)
		geodecodedLocationAfterUpsertMu.Unlock()
	}
}

// One returns a single geodecodedLocation record from the query.
func (q geodecodedLocationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*GeodecodedLocation, error) {
	o := &GeodecodedLocation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for geodecoded_location")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all GeodecodedLocation records from the query.
func (q geodecodedLocationQuery) All(ctx context.Context, exec boil.ContextExecutor) (GeodecodedLocationSlice, error) {
	var o []*GeodecodedLocation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to GeodecodedLocation slice")
	}

	if len(geodecodedLocationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all GeodecodedLocation records in the query.
func (q geodecodedLocationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count geodecoded_location rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q geodecodedLocationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if geodecoded_location exists")
	}

	return count > 0, nil
}

// GeodecodedLocations retrieves all the records using an executor.
func GeodecodedLocations(mods ...qm.QueryMod) geodecodedLocationQuery {
	mods = append(mods, qm.From("\"valuations_api\".\"geodecoded_location\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"valuations_api\".\"geodecoded_location\".*"})
	}

	return geodecodedLocationQuery{q}
}

// FindGeodecodedLocation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGeodecodedLocation(ctx context.Context, exec boil.ContextExecutor, tokenID int64, selectCols ...string) (*GeodecodedLocation, error) {
	geodecodedLocationObj := &GeodecodedLocation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"valuations_api\".\"geodecoded_location\" where \"token_id\"=$1", sel,
	)

	q := queries.Raw(query, tokenID)

	err := q.Bind(ctx, exec, geodecodedLocationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from geodecoded_location")
	}

	if err = geodecodedLocationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return geodecodedLocationObj, err
	}

	return geodecodedLocationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *GeodecodedLocation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no geodecoded_location provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(geodecodedLocationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	geodecodedLocationInsertCacheMut.RLock()
	cache, cached := geodecodedLocationInsertCache[key]
	geodecodedLocationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			geodecodedLocationAllColumns,
			geodecodedLocationColumnsWithDefault,
			geodecodedLocationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(geodecodedLocationType, geodecodedLocationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(geodecodedLocationType, geodecodedLocationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"valuations_api\".\"geodecoded_location\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"valuations_api\".\"geodecoded_location\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into geodecoded_location")
	}

	if !cached {
		geodecodedLocationInsertCacheMut.Lock()
		geodecodedLocationInsertCache[key] = cache
		geodecodedLocationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the GeodecodedLocation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *GeodecodedLocation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	geodecodedLocationUpdateCacheMut.RLock()
	cache, cached := geodecodedLocationUpdateCache[key]
	geodecodedLocationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			geodecodedLocationAllColumns,
			geodecodedLocationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update geodecoded_location, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"valuations_api\".\"geodecoded_location\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, geodecodedLocationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(geodecodedLocationType, geodecodedLocationMapping, append(wl, geodecodedLocationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update geodecoded_location row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for geodecoded_location")
	}

	if !cached {
		geodecodedLocationUpdateCacheMut.Lock()
		geodecodedLocationUpdateCache[key] = cache
		geodecodedLocationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q geodecodedLocationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for geodecoded_location")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for geodecoded_location")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GeodecodedLocationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), geodecodedLocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"valuations_api\".\"geodecoded_location\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, geodecodedLocationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in geodecodedLocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all geodecodedLocation")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *GeodecodedLocation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no geodecoded_location provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(geodecodedLocationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	geodecodedLocationUpsertCacheMut.RLock()
	cache, cached := geodecodedLocationUpsertCache[key]
	geodecodedLocationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			geodecodedLocationAllColumns,
			geodecodedLocationColumnsWithDefault,
			geodecodedLocationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			geodecodedLocationAllColumns,
			geodecodedLocationPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert geodecoded_location, could not build update column list")
		}

		ret := strmangle.SetComplement(geodecodedLocationAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(geodecodedLocationPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert geodecoded_location, could not build conflict column list")
			}

			conflict = make([]string, len(geodecodedLocationPrimaryKeyColumns))
			copy(conflict, geodecodedLocationPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"valuations_api\".\"geodecoded_location\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(geodecodedLocationType, geodecodedLocationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(geodecodedLocationType, geodecodedLocationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert geodecoded_location")
	}

	if !cached {
		geodecodedLocationUpsertCacheMut.Lock()
		geodecodedLocationUpsertCache[key] = cache
		geodecodedLocationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single GeodecodedLocation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *GeodecodedLocation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no GeodecodedLocation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), geodecodedLocationPrimaryKeyMapping)
	sql := "DELETE FROM \"valuations_api\".\"geodecoded_location\" WHERE \"token_id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from geodecoded_location")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for geodecoded_location")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q geodecodedLocationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no geodecodedLocationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from geodecoded_location")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for geodecoded_location")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GeodecodedLocationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(geodecodedLocationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), geodecodedLocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"valuations_api\".\"geodecoded_location\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, geodecodedLocationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from geodecodedLocation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for geodecoded_location")
	}

	if len(geodecodedLocationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *GeodecodedLocation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGeodecodedLocation(ctx, exec, o.TokenID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GeodecodedLocationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GeodecodedLocationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), geodecodedLocationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"valuations_api\".\"geodecoded_location\".* FROM \"valuations_api\".\"geodecoded_location\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, geodecodedLocationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GeodecodedLocationSlice")
	}

	*o = slice

	return nil
}

// GeodecodedLocationExists checks if the GeodecodedLocation row exists.
func GeodecodedLocationExists(ctx context.Context, exec boil.ContextExecutor, tokenID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"valuations_api\".\"geodecoded_location\" where \"token_id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, tokenID)
	}
	row := exec.QueryRowContext(ctx, sql, tokenID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if geodecoded_location exists")
	}

	return exists, nil
}

// Exists checks if the GeodecodedLocation row exists.
func (o *GeodecodedLocation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GeodecodedLocationExists(ctx, exec, o.TokenID)
}
