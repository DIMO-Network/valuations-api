// Code generated by MockGen. DO NOT EDIT.
// Source: run_valuation.go

// Package mock_commands is a generated GoMock package.
package mock_commands

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRunValuationCommandHandler is a mock of RunValuationCommandHandler interface.
type MockRunValuationCommandHandler struct {
	ctrl     *gomock.Controller
	recorder *MockRunValuationCommandHandlerMockRecorder
}

// MockRunValuationCommandHandlerMockRecorder is the mock recorder for MockRunValuationCommandHandler.
type MockRunValuationCommandHandlerMockRecorder struct {
	mock *MockRunValuationCommandHandler
}

// NewMockRunValuationCommandHandler creates a new mock instance.
func NewMockRunValuationCommandHandler(ctrl *gomock.Controller) *MockRunValuationCommandHandler {
	mock := &MockRunValuationCommandHandler{ctrl: ctrl}
	mock.recorder = &MockRunValuationCommandHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunValuationCommandHandler) EXPECT() *MockRunValuationCommandHandlerMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRunValuationCommandHandler) Execute(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockRunValuationCommandHandlerMockRecorder) Execute(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRunValuationCommandHandler)(nil).Execute), ctx)
}
