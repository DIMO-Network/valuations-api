// Code generated by swaggo/swag at 2023-08-25 10:03:07.80253 -0400 EDT m=+1.046536335. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/user/devices/{userDeviceID}/offers": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets offers for a particular user device",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.DeviceOffer"
                        }
                    }
                }
            }
        },
        "/user/devices/{userDeviceID}/valuations": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "gets valuations for a particular user device. Includes only price valuations, not offers. only gets the latest valuation.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user-devices"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "user device id",
                        "name": "userDeviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_controllers.DeviceValuation"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "internal_controllers.DeviceOffer": {
            "type": "object",
            "properties": {
                "offerSets": {
                    "description": "Contains a list of offer sets, one for each source",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.OfferSet"
                    }
                }
            }
        },
        "internal_controllers.DeviceValuation": {
            "type": "object",
            "properties": {
                "valuationSets": {
                    "description": "Contains a list of valuation sets, one for each vendor",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.ValuationSet"
                    }
                }
            }
        },
        "internal_controllers.Offer": {
            "type": "object",
            "properties": {
                "declineReason": {
                    "description": "The reason the offer was declined from the vendor",
                    "type": "string"
                },
                "error": {
                    "description": "An error from the vendor (eg. when the VIN is invalid)",
                    "type": "string"
                },
                "grade": {
                    "description": "The grade of the offer from the vendor (eg. \"RETAIL\")",
                    "type": "string"
                },
                "price": {
                    "description": "The offer price from the vendor",
                    "type": "integer"
                },
                "url": {
                    "description": "The offer URL from the vendor",
                    "type": "string"
                },
                "vendor": {
                    "description": "The vendor of the offer (eg. \"carmax\", \"carvana\", etc.)",
                    "type": "string"
                }
            }
        },
        "internal_controllers.OfferSet": {
            "type": "object",
            "properties": {
                "mileage": {
                    "description": "The mileage used for the offers",
                    "type": "integer"
                },
                "offers": {
                    "description": "Contains a list of offers from the source",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_controllers.Offer"
                    }
                },
                "source": {
                    "description": "The source of the offers (eg. \"drivly\")",
                    "type": "string"
                },
                "updated": {
                    "description": "The time the offers were pulled",
                    "type": "string"
                },
                "zipCode": {
                    "description": "This will be the zip code used (if any) for the offers request regardless if the source uses it",
                    "type": "string"
                }
            }
        },
        "internal_controllers.ValuationSet": {
            "type": "object",
            "properties": {
                "currency": {
                    "description": "eg. USD or EUR",
                    "type": "string"
                },
                "mileage": {
                    "description": "The mileage used for the valuation",
                    "type": "integer"
                },
                "odometer": {
                    "type": "integer"
                },
                "odometerUnit": {
                    "type": "string"
                },
                "retail": {
                    "description": "retail is equal to retailAverage when available",
                    "type": "integer"
                },
                "retailAverage": {
                    "type": "integer"
                },
                "retailClean": {
                    "description": "retailClean, retailAverage, and retailRough my not always be available",
                    "type": "integer"
                },
                "retailRough": {
                    "type": "integer"
                },
                "retailSource": {
                    "description": "Useful when Drivly returns multiple vendors and we've selected one (eg. \"drivly:blackbook\")",
                    "type": "string"
                },
                "tradeIn": {
                    "description": "tradeIn is equal to tradeInAverage when available",
                    "type": "integer"
                },
                "tradeInAverage": {
                    "type": "integer"
                },
                "tradeInClean": {
                    "description": "tradeInClean, tradeInAverage, and tradeInRough my not always be available",
                    "type": "integer"
                },
                "tradeInRough": {
                    "type": "integer"
                },
                "tradeInSource": {
                    "description": "Useful when Drivly returns multiple vendors and we've selected one (eg. \"drivly:blackbook\")",
                    "type": "string"
                },
                "updated": {
                    "description": "The time the valuation was pulled or in the case of blackbook, this may be the event time of the device odometer which was used for the valuation",
                    "type": "string"
                },
                "userDisplayPrice": {
                    "description": "UserDisplayPrice the top level value to show to users in mobile app",
                    "type": "integer"
                },
                "vendor": {
                    "description": "The source of the valuation (eg. \"drivly\" or \"blackbook\")",
                    "type": "string"
                },
                "zipCode": {
                    "description": "This will be the zip code used (if any) for the valuation request regardless if the vendor uses it",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
